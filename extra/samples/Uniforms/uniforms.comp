#version 450

#if defined(GPUPAD_GLSLANG)
# extension GL_EXT_scalar_block_layout: enable
#else
# extension GL_NV_uniform_buffer_std430_layout: enable
#endif

#define assertEq(X, Y) if ((X) == (Y)); else printf("Assertion %.1f == %.1f failed in line %d.", (X), (Y), __LINE__)

layout (local_size_x = 1) in;

struct Type2 {
  vec3 z;
  vec2 w;
};

struct Type {
  float x[2];
  Type2 y[2];
};

uniform float u_values_0[2][2];
uniform Type  u_values_1[2];
uniform vec2  u_values_2;
uniform vec3  u_values_3[2];
uniform mat3  u_values_4;

layout(std430) uniform u_block {
  float values_0[2][2];
  Type  values_1[2];
  vec2  values_2;
} block;

layout(std430) uniform u_block_2 {
  float values_0[2];
} block_2[2];

void main() {
  assertEq(u_values_0[0][0], 1.2);
  assertEq(u_values_0[0][1], 2.0);
  assertEq(u_values_0[1][0], 3.1);
  assertEq(u_values_0[1][1], 4.2);
  
  assertEq(u_values_1[0].x[0], float(1));
  assertEq(u_values_1[0].x[1], float(2));
  assertEq(u_values_1[0].y[0].z, vec3(3, 4, 5));
  assertEq(u_values_1[0].y[0].w, vec2(6, 7));
  assertEq(u_values_1[0].y[1].z, vec3(8, 9, 10));
  assertEq(u_values_1[0].y[1].w, vec2(11, 12));  
  assertEq(u_values_1[1].x[0], float(13));
  assertEq(u_values_1[1].x[1], float(14));
  assertEq(u_values_1[1].y[0].z, vec3(15, 16, 17));
  assertEq(u_values_1[1].y[0].w, vec2(18, 19));
  assertEq(u_values_1[1].y[1].z, vec3(20, 21, 22));
  assertEq(u_values_1[1].y[1].w, vec2(23, 24));

  assertEq(u_values_2, vec2(1.0, 2.0));
  
  assertEq(u_values_3[0], vec3(1.0, 2.0, 3.0));
  assertEq(u_values_3[1], vec3(4.1, 5.1, 6.1));
  
  assertEq(u_values_4, mat3(1, 2, 3, 4, 5, 6, 7, 8, 9));  
  
  assertEq(block.values_0[0][0], 1.2);
  assertEq(block.values_0[0][1], 2.0);
  assertEq(block.values_0[1][0], 3.1);
  assertEq(block.values_0[1][1], 4.2);
  
  assertEq(block.values_1[0].x[0], float(1));
  assertEq(block.values_1[0].x[1], float(2));
  assertEq(block.values_1[0].y[0].z, vec3(3, 4, 5));
  assertEq(block.values_1[0].y[0].w, vec2(6, 7));
  assertEq(block.values_1[0].y[1].z, vec3(8, 9, 10));
  assertEq(block.values_1[0].y[1].w, vec2(11, 12));  
  assertEq(block.values_1[1].x[0], float(13));
  assertEq(block.values_1[1].x[1], float(14));
  assertEq(block.values_1[1].y[0].z, vec3(15, 16, 17));
  assertEq(block.values_1[1].y[0].w, vec2(18, 19));
  assertEq(block.values_1[1].y[1].z, vec3(20, 21, 22));
  assertEq(block.values_1[1].y[1].w, vec2(23, 24));
  
  assertEq(block.values_2, vec2(1.0, 2.0));
  
  assertEq(block_2[0].values_0[0], float(1));
  assertEq(block_2[0].values_0[1], float(2));
  assertEq(block_2[1].values_0[0], float(3));
  assertEq(block_2[1].values_0[1], float(4));  
}
