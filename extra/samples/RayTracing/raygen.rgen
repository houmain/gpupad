#version 460 core
#extension GL_EXT_ray_tracing : enable

layout(location = 0) rayPayloadEXT vec4 payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D img;
layout(set = 1, binding = 0) uniform Camera
{
    mat4 viewMatrix;
    mat4 projectionMatrix;
}
camera;

vec3 unproject(vec3 ndc)
{
    mat4 inverseViewProjection = inverse(camera.projectionMatrix * camera.viewMatrix);
    vec4 tmp = inverseViewProjection * vec4(ndc, 1.0);
    tmp = tmp / tmp.w;
    return tmp.xyz;
}

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    // Ray is expected to be provided in world space
    vec3 near = unproject(vec3(d.xy, 0.0));
    vec3 far = unproject(vec3(d.xy, 1.0));

    vec4 origin = vec4(near, 1.0);
    vec4 direction = vec4(normalize(far - near), 0.0);

    uint rayFlags = gl_RayFlagsNoneEXT;
    float tMin = 0.1;
    float tMax = 1000.0;

    traceRayEXT(topLevelAS, // acceleration structure
                rayFlags, // rayFlags
                0xFF, // cullMask
                0, // sbtRecordOffset
                0, // sbtRecordStride
                0, // missIndex
                origin.xyz, // ray origin
                tMin, // ray min range
                direction.xyz, // ray direction
                tMax, // ray max range
                0 // payload (location = 0)
    );

    imageStore(img, ivec2(gl_LaunchIDEXT.xy), payload);
}
