#version 450

layout(local_size_x = 256) in;

struct ParticleData {
    vec4 position;
    vec4 velocity;
    vec4 color;
};

// Particles from previouse frame
layout(std430, set = 0, binding = 0) coherent buffer Particles
{
    ParticleData particles[];
}
data;

const float particleStep = 0.05;
const float finalCollisionFactor = 0.1;

void main(void)
{
    uint globalId = gl_GlobalInvocationID.x;

    // Retrieve current particle from previous frame
    ParticleData currentParticle = data.particles[globalId];

    // New position = old position + distance traveled over step duration
    currentParticle.position.xyz = currentParticle.position.xyz + currentParticle.velocity.xyz * particleStep;

    // Reset particles that would go out of the cube
    if (any(greaterThanEqual(abs(currentParticle.position.xyz) + vec3(currentParticle.position.w), vec3(32.0))))
        currentParticle.position.xyz = vec3(0.0);

    // Make acceleration more or less point toward the center of the scene
    vec3 acceleration = normalize(vec3(0.0) - currentParticle.position.xyz) * finalCollisionFactor;

    // New velocity = old velocity + acceleration over step duration
    currentParticle.velocity.xyz = currentParticle.velocity.xyz + acceleration * particleStep;

    // Save updated particle
    data.particles[globalId] = currentParticle;
}
