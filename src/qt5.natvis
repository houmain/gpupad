<?xml version="1.0" encoding="utf-8"?>
<!--
This file taken from https://github.com/qt-labs/vstools/blob/dev/src/qtvstools/qt5.natvis.xml
Usually it is a part of Qt-add-in for MSVS:
****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt VS Tools.
**
** $QT_BEGIN_LICENSE:GPL-EXCEPT$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 as published by the Free Software
** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************

Changes: 2018 Alexey Nikolaev <nae202@gmail.com>
Motivation: I'm not use this add-in. So, the original file didn't work as expected
1. QString. Show reference, if available.
2. QStringRef. Added.
3. QSharedPointer, QWeakPointer, QScopedPointer, QScopedArrayPointer. Replaced annoying message by pointer value (null if empty)
4. QList and QQueue. Finally, it work for big or small data and for templates like QList<QPair<int,int>>
5. QHash. Show real values, also if it have nested nodes. Unfortunately, the value order is not guarantee
-->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="QPoint">
    <AlternativeType Name="QPointF" />
    <DisplayString>{{ x = {xp}, y = {yp} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
    </Expand>
  </Type>

  <Type Name="QRect">
    <DisplayString>{{ x = {x1}, y = {y1}, width = {x2 - x1 + 1}, height = {y2 - y1 + 1} }}</DisplayString>
    <Expand>
      <Item Name="[x]">x1</Item>
      <Item Name="[y]">y1</Item>
      <Item Name="[width]">x2 - x1 + 1</Item>
      <Item Name="[height]">y2 - y1 + 1</Item>
    </Expand>
  </Type>

  <Type Name="QRectF">
    <DisplayString>{{ x = {xp}, y = {yp}, width = {w}, height = {h} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
      <Item Name="[width]">w</Item>
      <Item Name="[height]">h</Item>
    </Expand>
  </Type>

  <Type Name="QSize">
    <AlternativeType Name="QSizeF" />
    <DisplayString>{{ width = {wd,g}, height = {ht,g} }}</DisplayString>
    <Expand>
      <Item Name="[width]">wd</Item>
      <Item Name="[height]">ht</Item>
    </Expand>
  </Type>

  <Type Name="QLine">
    <AlternativeType Name="QLineF" />
    <DisplayString>{{ start point = {pt1}, end point = {pt2} }}</DisplayString>
    <Expand>
      <Synthetic Name="[start point]">
        <DisplayString>{pt1}</DisplayString>
        <Expand>
          <ExpandedItem>pt1</ExpandedItem>
        </Expand>
      </Synthetic>
      <Synthetic Name="[end point]">
        <DisplayString>{pt2}</DisplayString>
        <Expand>
          <ExpandedItem>pt2</ExpandedItem>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="QPolygon">
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <ArrayItems>
        <Size>d-&gt;size</Size>
        <ValuePointer>(QPoint*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QPolygonF">
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[closed]">
        d-&gt;size &gt; 0
        &amp;&amp; ((((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[0]).xp
        == (((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[d-&gt;size - 1]).xp)
        &amp;&amp; ((((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[0]).yp
        == (((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[d-&gt;size - 1]).yp)
      </Item>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <ArrayItems>
        <Size>d-&gt;size</Size>
        <ValuePointer>(QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name ="QVector2D">
    <DisplayString>{{ x = {xp}, y = {yp} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
    </Expand>
  </Type>

  <Type Name ="QVector3D">
    <DisplayString>{{ x = {xp}, y = {yp}, z = {zp} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
      <Item Name="[z]">zp</Item>
    </Expand>
  </Type>

  <Type Name ="QVector4D">
    <DisplayString>{{ x = {xp}, y = {yp}, z = {zp}, w = {wp} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
      <Item Name="[z]">zp</Item>
      <Item Name="[w]">wp</Item>
    </Expand>
  </Type>

  <!--Alternative QVector for newer Qt -->
  <Type Name ="QVector2D">
    <Expand>
      <Item Name="x">v[0],g</Item>
      <Item Name="y">v[1],g</Item>
    </Expand>
  </Type>

  <Type Name ="QVector3D">
    <Expand>
      <Item Name="x">v[0],g</Item>
      <Item Name="y">v[1],g</Item>
      <Item Name="z">v[2],g</Item>
    </Expand>
  </Type>

  <Type Name ="QVector4D">
    <Expand>
      <Item Name="x">v[0],g</Item>
      <Item Name="y">v[1],g</Item>
      <Item Name="z">v[2],g</Item>
      <Item Name="w">v[3],g</Item>
    </Expand>
  </Type>

  <Type Name ="QMatrix">
    <!-- {{{{{_m11,g}, {_m12,g}}}, {{{_m21,g}, {_m22,g}}}, {{{_dx,g}, {_dy,g}}}}}-->
    <DisplayString>
      {{{{{_m11,g}, {_m12,g}, {_dx,g}}}, {{{_m21,g}, {_m22,g}, {_dy,g}}}}}
    </DisplayString>
    <Expand>
      <Item Name="[m11]">_m11</Item>
      <Item Name="[m12]">_m12</Item>
      <Item Name="[m21]">_m21</Item>
      <Item Name="[m22]">_m22</Item>
      <Item Name="[dx]">_dx</Item>
      <Item Name="[dy]">_dy</Item>
    </Expand>
  </Type>

  <Type Name ="QTransform">
    <DisplayString Condition="false">
      {{
      {{{affine._m11,g}, {affine._m12,g}, {m_13,g}}},
      {{{affine._m21,g}, {affine._m22,g}, {m_23,g}}},
      {{{affine._dx,g}, {affine._dy,g}, {m_33,g}}}
      }}
    </DisplayString>
    <DisplayString>
      {{ {{{affine._m11,g}, {affine._m21,g}, {affine._dx,g}}}, {{{affine._m12,g}, {affine._m22,g}, {affine._dy,g}}}, {{{m_13,g}, {m_23,g}, {m_33,g}}} }}
    </DisplayString>
  </Type>

  <Type Name ="QMatrix4x4">
    <DisplayString>
      {{ m11 = {m[0][0]}, m12 = {m[1][0]}, m13 = {m[2][0]}, m14 = {m[3][0]}, ... }}
    </DisplayString>
    <Expand>
      <Item Name="[m11]">m[0][0]</Item>
      <Item Name="[m12]">m[1][0]</Item>
      <Item Name="[m13]">m[2][0]</Item>
      <Item Name="[m14]">m[3][0]</Item>
      <Item Name="[m21]">m[0][1]</Item>
      <Item Name="[m22]">m[1][1]</Item>
      <Item Name="[m23]">m[2][1]</Item>
      <Item Name="[m24]">m[3][1]</Item>
      <Item Name="[m31]">m[0][2]</Item>
      <Item Name="[m32]">m[1][2]</Item>
      <Item Name="[m33]">m[2][2]</Item>
      <Item Name="[m34]">m[3][2]</Item>
      <Item Name="[m41]">m[0][3]</Item>
      <Item Name="[m42]">m[1][3]</Item>
      <Item Name="[m43]">m[2][3]</Item>
      <Item Name="[m44]">m[3][3]</Item>
    </Expand>
  </Type>

  <Type Name="QSizePolicy">
    <DisplayString>
      {{ horizontal = {static_cast&lt;Policy&gt;(bits.horPolicy)}, vertical = {static_cast&lt;Policy&gt;(bits.verPolicy)}, type = {ControlType(1 &lt;&lt; bits.ctype)} }}
    </DisplayString>
    <Expand>
      <Synthetic Name="[vertical policy]">
        <DisplayString>QSizePolicy::Policy::{static_cast&lt;Policy&gt;(bits.verPolicy)}</DisplayString>
      </Synthetic>
      <Synthetic Name="[horizontal policy]">
        <DisplayString>QSizePolicy::Policy::{static_cast&lt;Policy&gt;(bits.horPolicy)}</DisplayString>
      </Synthetic>
      <Synthetic Name="[control type]">
        <DisplayString>QSizePolicy::ControlType::{ControlType(1 &lt;&lt; bits.ctype)}</DisplayString>
      </Synthetic>
      <Synthetic Name="[expanding directions]">
        <DisplayString
            Condition="(static_cast&lt;Policy&gt;(bits.verPolicy) &amp; ExpandFlag)">
          Qt::Vertical (2)
        </DisplayString>
        <DisplayString
            Condition="(static_cast&lt;Policy&gt;(bits.horPolicy) &amp; ExpandFlag)">
          Qt::Horizontal (1)
        </DisplayString>
      </Synthetic>
      <Item Name="[vertical stretch]">static_cast&lt;int&gt;(bits.verStretch)</Item>
      <Item Name="[horizontal stretch]">static_cast&lt;int&gt;(bits.horStretch)</Item>
      <Item Name="[has height for width]">bits.hfw == 1</Item>
      <Item Name="[has width for height]">bits.wfh == 1</Item>
    </Expand>
  </Type>

  <Type Name="QChar">
    <DisplayString>{ucs,c}</DisplayString>
    <StringView>ucs,c</StringView>
    <Expand>
      <Item Name="[latin 1]">ucs > 0xff ? '\0' : char(ucs),c</Item>
      <Item Name="[unicode]">ucs,c</Item>
    </Expand>
  </Type>

  <Type Name="QString">
    <DisplayString Optional="true">{((unsigned short*)d) + d-&gt;offset / 2,[d-&gt;size]sub}</DisplayString>
    <StringView>((unsigned short*)d) + d-&gt;offset / 2,[d-&gt;size]sub</StringView>
    <Expand>
      <Item Name="[value]">((unsigned short*)d) + d->offset / 2,[d-&gt;size]sub</Item>
      <Item Name="[referenced]" Optional="true">d-&gt;ref.atomic._q_value</Item>
      <Item Name="[size]" ExcludeView="DisplayString">d-&gt;size</Item>
      <ArrayItems>
        <Size>d-&gt;size</Size>
        <ValuePointer>((unsigned short*)d) + d->offset / 2,c</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QStringRef">
    <DisplayString ModuleName="QtCored.dll">{&amp;(*m_string)[m_position],[m_size]sub}</DisplayString>
    <StringView>&amp;(*m_string)[m_position],[m_size]sub</StringView>
  </Type>

  <Type Name="QByteArray">
    <Intrinsic Name="data" Expression="((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)"></Intrinsic>
    <DisplayString>{data(),sb}</DisplayString>
    <StringView>data(),sb</StringView>
    <Expand>
      <Item Name="[size]">d-&gt;size</Item>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <ArrayItems>
        <Size>d-&gt;size</Size>
        <ValuePointer>data(),c</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QBitArray">
    <DisplayString>{{ size = {(d.d-&gt;size &lt;&lt; 3) - *((reinterpret_cast&lt;char*&gt;(d.d)) + d.d-&gt;offset)} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d.d-&gt;ref.atomic._q_value</Item>
      <IndexListItems>
        <Size>(d.d-&gt;size &lt;&lt; 3) - *((reinterpret_cast&lt;char*&gt;(d.d)) + d.d-&gt;offset)</Size>
        <ValueNode>
          (*(reinterpret_cast&lt;const unsigned char*&gt;((reinterpret_cast&lt;char*&gt;(d.d)) + d.d-&gt;offset) + 1
          + ($i &gt;&gt; 3)) &amp; (1 &lt;&lt; ($i &amp; 7))) != 0
        </ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QVarLengthArray&lt;*&gt;">
    <AlternativeType Name="QVarLengthArray&lt;*, int&gt;" />
    <DisplayString>{{ size = {s} }}</DisplayString>
    <Expand>
      <Item Name="[capacity]">a</Item>
      <ArrayItems>
        <Size>s</Size>
        <ValuePointer>ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QDate">
    <DisplayString>{{ julian day = {jd} }}</DisplayString>
    <Expand></Expand>
  </Type>

  <Type Name="QTime">
    <DisplayString
        Condition="mds == 1">{{ millisecond = {mds} }}</DisplayString>
    <DisplayString
        Condition="mds != 1">{{ milliseconds = {mds} }}</DisplayString>
    <Expand>
      <Item Name="[hour]"
            Condition="(mds / 3600000) == 1">mds / 3600000, d</Item>
      <Item Name="[hours]"
            Condition="(mds / 3600000) != 1">mds / 3600000, d</Item>
      <Item Name="[minute]"
            Condition="((mds % 3600000) / 60000) == 1">(mds % 3600000) / 60000, d</Item>
      <Item Name="[minutes]"
            Condition="((mds % 3600000) / 60000) != 1">(mds % 3600000) / 60000, d</Item>
      <Item Name="[second]"
            Condition="((mds / 1000) % 60) == 1">(mds / 1000) % 60, d</Item>
      <Item Name="[seconds]"
            Condition="((mds / 1000) % 60) != 1">(mds / 1000) % 60, d</Item>
      <Item Name="[millisecond]"
            Condition="(mds % 1000) == 1">mds % 1000, d</Item>
      <Item Name="[milliseconds]"
            Condition="(mds % 1000) != 1">mds % 1000, d</Item>
    </Expand>
  </Type>

  <Type Name="QRegularExpression">
    <DisplayString>{d.pattern}</DisplayString>
  </Type>

  <Type Name="QSharedData">
    <Expand>
      <Item Name="[referenced]">ref._q_value</Item>
    </Expand>
  </Type>

  <Type Name="QSharedPointer&lt;*&gt;">
    <DisplayString Condition="!value">null</DisplayString>
    <DisplayString>{{s|w={d-&gt;strongref._q_value}|{d-&gt;weakref._q_value}}}, {*value}</DisplayString>
    <Expand>
      <ExpandedItem Condition="value">*value</ExpandedItem>
    </Expand>
  </Type>

  <!--<Type Name="QSharedDataPointer&lt;*&gt;">
        <DisplayString>pointer to implicit shared object of type {"$T1"}</DisplayString>
        <Expand>
            <ExpandedItem>($T1*)d</ExpandedItem>
        </Expand>
    </Type>-->

  <Type Name="QExplicitlySharedDataPointer&lt;*&gt;">
    <DisplayString>pointer to explicit shared object of type {"$T1"}</DisplayString>
    <Expand>
      <ExpandedItem>d</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QPointer&lt;*&gt;">
    <DisplayString>guarded pointer to subclass of QObject of type {"$T1"}</DisplayString>
    <Expand>
      <Item Name="[is null]">wp.d == 0 || wp.d-&gt;strongref._q_value == 0 || wp.value == 0</Item>
    </Expand>
  </Type>

  <Type Name="QWeakPointer&lt;*&gt;">
    <!--weak reference to shared pointer of type {"$T1"}-->
    <DisplayString Condition="!value">null</DisplayString>
    <DisplayString>{{s|w={d-&gt;strongref._q_value}|{d-&gt;weakref._q_value} {(void*)value}}}</DisplayString>
    <Expand>
      <ExpandedItem Condition="value">value</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QScopedPointer&lt;*&gt;">
    <AlternativeType Name="QScopedArrayPointer&lt;*&gt;" />
    <DisplayString Condition="!d">null</DisplayString>
    <DisplayString>{*d}</DisplayString>
    <Expand>
      <ExpandedItem Condition="d">*d</ExpandedItem>
    </Expand>
  </Type>

  <!--<Type Name="QScopedArrayPointer&lt;*&gt;">
        <DisplayString>scoped pointer to dynamically allocated array of objects of type {"$T1"}</DisplayString>
        <Expand>
            <Item Name="[is null]">!d</Item>
        </Expand>
    </Type>-->

  <Type Name="QPair&lt;*,*&gt;">
    <DisplayString>({first}, {second})</DisplayString>
    <Expand>
      <Item Name="[first]">first</Item>
      <Item Name="[second]">second</Item>
    </Expand>
  </Type>

  <Type Name="QVector&lt;*&gt;">
    <AlternativeType Name="QStack&lt;*&gt;"></AlternativeType>
    <Intrinsic Name="size" Expression="d ? d-&gt;size : 0"/>
    <Intrinsic Name="data" Expression="($T1*)((char*)d + d-&gt;offset)"/>
    <Intrinsic Name="at" Expression="data()[id]">
      <Parameter Name="id" Type="int"/>
    </Intrinsic>
    <DisplayString Condition="d">{{ size = {d-&gt;size} }}</DisplayString>
    <DisplayString>empty</DisplayString>
    <Expand>
      <Item Name="[referenced]" Condition="d">d-&gt;ref.atomic._q_value</Item>
      <ArrayItems Condition="d">
        <Size>d-&gt;size</Size>
        <ValuePointer>($T1*)((char*)d + d-&gt;offset)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QList&lt;*&gt;::Node" Priority="Medium">
    <Expand>
      <ExpandedItem Optional="true">
        *($T1*)v
      </ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QList&lt;*&gt;::Node">
    <Intrinsic Name="sz" Expression="QTypeInfo&lt;$T1&gt;::isLarge || QTypeInfo&lt;$T1&gt;::isStatic" />
    <Expand>
      <ExpandedItem Optional="true" Condition="sz()">
        *($T1*)v
      </ExpandedItem>
      <ExpandedItem Optional="true" Condition="!sz()">
        *($T1*)this
      </ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QList&lt;*&gt;" Priority="Medium">
    <AlternativeType Name="QQueue&lt;*&gt;" Priority="Medium"></AlternativeType>
    <Intrinsic Name="sz" Expression="sizeof($T1)&gt;16" />
    <Intrinsic Name="length" Expression="d-&gt;end - d-&gt;begin" />
    <Intrinsic Name="pointer" Expression="((QList&lt;$T1&gt;::Node*)(d->array + d->begin + i))">
      <Parameter Name="i" Type="int" />
    </Intrinsic>
    <DisplayString Condition="d==nullptr || !length()">empty</DisplayString>
    <DisplayString>{{ size = {d-&gt;end - d-&gt;begin} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <IndexListItems Optional="true">
        <Size>length()</Size>
        <ValueNode Condition="sz()">*($T1*)(pointer($i)-&gt;v)</ValueNode>
        <ValueNode Condition="!sz()">*($T1*)pointer($i)</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QList&lt;*&gt;">
    <AlternativeType Name="QQueue&lt;*&gt;" />
    <Intrinsic Name="sz" Expression="(int)QTypeInfo&lt;$T1&gt;::isLarge || (int)QTypeInfo&lt;$T1&gt;::isStatic" />
    <Intrinsic Name="length" Expression="d-&gt;end - d-&gt;begin" />
    <Intrinsic Name="pointer" Expression="((QList&lt;$T1&gt;::Node*)(d->array + d->begin + i))">
      <Parameter Name="i" Type="int" />
    </Intrinsic>
    <DisplayString Condition="d==nullptr || !length()">empty</DisplayString>
    <DisplayString>{{ size = {length()} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <IndexListItems Optional="true">
        <Size>length()</Size>
        <ValueNode Condition="sz()">*($T1*)(pointer($i)-&gt;v)</ValueNode>
        <ValueNode Condition="!sz()">*($T1*)pointer($i)</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QStringList">
    <DisplayString>{{ size = {d-&gt;end - d-&gt;begin} }}</DisplayString>
    <Expand>
      <ExpandedItem>
        *((QList&lt;QString&gt;*)this)
      </ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QLinkedList&lt;*&gt;">
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <LinkedListItems>
        <Size>d-&gt;size</Size>
        <HeadPointer>d-&gt;n</HeadPointer>
        <NextPointer>n</NextPointer>
        <ValueNode>(*(QLinkedListNode&lt;$T1&gt;*)this).t</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="QMapNode&lt;*,*&gt;">
    <DisplayString>({key}, {value})</DisplayString>
    <Expand>
      <Item Name="[key]">key</Item>
      <Item Name="[value]">value</Item>
    </Expand>
  </Type>

  <Type Name="QMap&lt;*,*&gt;">
    <AlternativeType Name="QMultiMap&lt;*,*&gt;" />
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <TreeItems>
        <Size>d-&gt;size</Size>
        <HeadPointer>d-&gt;header.left</HeadPointer>
        <LeftPointer>left</LeftPointer>
        <RightPointer>right</RightPointer>
        <ValueNode>*((QMapNode&lt;$T1,$T2&gt;*)this)</ValueNode>
      </TreeItems>
    </Expand>
  </Type>

  <Type Name="QHashNode&lt;*,*&gt;">
    <DisplayString Condition="next == 0">(empty)</DisplayString>
    <DisplayString Condition="next != 0">({key}, {value})</DisplayString>
    <Expand>
      <Item Name="[key]" Condition="next != 0">key</Item>
      <Item Name="[value]" Condition="next != 0">value</Item>
    </Expand>
  </Type>

  <Type Name="QHash&lt;*,*&gt;">
    <AlternativeType Name="QMultiHash&lt;*,*&gt;" />
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <CustomListItems Condition="d-&gt;numBuckets">
        <Variable Name="i" InitialValue="0" />
        <Variable Name="n" InitialValue="0" />
        <Variable Name="j" InitialValue="0" />
        <Variable Name="node" InitialValue="(QHashNode&lt;$T1,$T2&gt;*)0" />
        <Exec>i=0</Exec>
        <Loop Condition="i &lt; d-&gt;numBuckets">
          <Exec>node = (QHashNode&lt;$T1,$T2&gt;*)(d-&gt;buckets[i])</Exec>
          <Loop Condition="node-&gt;next != 0">
            <Item Name="[{j}]">*node</Item>
            <Exec>j++</Exec>
            <Exec>node = node-&gt;next</Exec>
          </Loop>
          <Exec>i++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="QHashNode&lt;*,QHashDummyValue&gt;">
    <DisplayString Condition="next == 0">(empty)</DisplayString>
    <DisplayString Condition="next != 0">{key}</DisplayString>
    <Expand>
      <Item Name="[key]" Condition="next != 0">key</Item>
    </Expand>
  </Type>

  <Type Name="QSet&lt;*&gt;">
    <DisplayString>{{ size = {q_hash.d-&gt;size} }}</DisplayString>
    <Expand>
      <ExpandedItem>q_hash</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QCache&lt;*,*&gt;::Node">
    <DisplayString>({*keyPtr}, {*t})</DisplayString>
    <Expand>
      <Item Name="[key]">*keyPtr</Item>
      <Item Name="[value]">*t</Item>
    </Expand>
  </Type>

  <Type Name="QCache&lt;*,*&gt;">
    <DisplayString>{{ size = {hash.d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[max coast]">mx</Item>
      <Item Name="[total coast]">total</Item>
      <Item Name="[referenced]">hash.d-&gt;ref.atomic._q_value</Item>
      <LinkedListItems>
        <Size>hash.d-&gt;size</Size>
        <HeadPointer>f</HeadPointer>
        <NextPointer>n</NextPointer>
        <ValueNode>*((Node*)this)</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="QVariant">
    <Intrinsic Name="pointer" Expression="d.is_shared
               ? d.data.shared-&gt;ptr
               : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)" Optional="true"></Intrinsic>
    <!--Region DisplayString QVariant-->

    <DisplayString Condition="d.type == QMetaType::UnknownType">Invalid</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Bool">{d.data.b}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Int">{d.data.i}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::UInt">{d.data.u}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::LongLong">{d.data.ll}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::ULongLong">{d.data.ull}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Double">double {{{d.data.d,g}}}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Float">float {{{d.data.f,g}}}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QChar">{d.data.c}</DisplayString>

    <DisplayString Optional="true" Condition="d.type == QMetaType::QVariantMap">{*((QMap&lt;QString,QVariant&gt;*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVariantList">{*((QList&lt;QVariant&gt;*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QString">{*((QString*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QStringList">{*((QStringList*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QByteArray">{*((QByteArray*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QBitArray">{*((QBitArray*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QDate">{*((QDate*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QTime">{*((QTime*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QDateTime">DateTime {*((QDateTime*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QUrl">Url {*((QUrl*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QLocale">Locale {*((QLocale*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRect">{*((QRect*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRectF">{*((QRectF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QSize">{*((QSize*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QSizeF">{*((QSizeF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QLine">{*((QLine*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QLineF">{*((QLineF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPoint">{*((QPoint*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPointF">{*((QPointF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRegExp">RegExp {*((QRegExp*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRegularExpression">RegularExpression {*((QRegularExpression*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVariantHash">{*((QHash&lt;QString,QVariant&gt;*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QEasingCurve">EasingCurve {*((QEasingCurve*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QUuid">Uuid {*((QUuid*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QModelIndex">ModelIndex {*((QModelIndex*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::LastCoreType">LastCoreType</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QFont">Font {*((QFont*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPixmap">Pixmap {*((QPixmap*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QBrush">Brush {*((QBrush*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QColor">Color {*((QColor*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPalette">Palette {*((QPalette*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QImage">Image {*((QImage*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPolygon">Polygon {*((QPolygon*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRegion">Region {*((QRegion*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QBitmap">Bitmap {*((QBitmap*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QCursor">Cursor {*((QCursor*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QKeySequence">KeySequence {*((QKeySequence*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPen">Pen {*((QPen*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QTextLength">TextLength {*((QTextLength*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QTextFormat">TextFormat {*((QTextFormat*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QMatrix">Matrix {*((QMatrix*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QTransform">Transform {*((QTransform*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QMatrix4x4">Matrix4x4 {*(QMatrix4x4*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVector2D">Vector2D {*(QVector2D*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVector3D">Vector3D {*(QVector3D*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVector4D">Vector4D {*(QVector4D*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QQuaternion">Quaternion {*(QQuaternion*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPolygonF">PolygonF {*((QPolygonF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QIcon">Icon {*((QIcon*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::LastGuiType">LastGuiType</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QSizePolicy">SizePolicy {*((QSizePolicy*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::User">UserType</DisplayString>
    <DisplayString Optional="true" Condition="d.type == 0xffffffff">LastType</DisplayString>

    <!--End region DisplayString QVariant-->

    <!--Region DisplayView QVariant-->

    <StringView Condition="d.type == QMetaType::QChar">d.data.c</StringView>
    <StringView Condition="d.type == QMetaType::QString">*((QString*)pointer())</StringView>
    <StringView Condition="d.type == QMetaType::QByteArray">*((QByteArray*)pointer())</StringView>

    <!--End region DisplayView QVariant-->

    <!--Region Expand QVariant-->

    <Expand>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QVariantMap"> *((QMap&lt;QString,QVariant&gt;*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QVariantList">*((QList&lt;QVariant&gt;*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QString">     *((QString*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QStringList"> *((QStringList*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QByteArray">  *((QByteArray*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QBitArray">   *((QBitArray*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QDate">       *((QDate*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QTime">       *((QTime*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QRect">       *((QRect*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QRectF">      *((QRectF*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QSize">       *((QSize*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QSizeF">      *((QSizeF*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QLine">       *((QLine*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QLineF">      *((QLineF*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QPoint">      *((QPoint*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QPointF">     *((QPointF*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QVariantHash">*((QHash&lt;QString,QVariant&gt;*)pointer())</ExpandedItem>
    </Expand>

    <!--End region Expand QVariant-->
  </Type>
</AutoVisualizer>
