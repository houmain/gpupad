#version 430

layout (local_size_x = 1) in;

layout(binding = 0, offset = 0) uniform atomic_uint uCounter0;
layout(binding = 0, offset = 4) uniform atomic_uint uCounter1;

layout(std430) buffer uCounters2 {
  uint uCounter2;
  uint uCounter3;
};

layout(rgba8ui) uniform uimageBuffer uData;

void main() {
  // increment counter0 in ACB once
  uint pos = atomicCounterIncrement(uCounter0);
  
  // increment counter1 in ACB twice
  atomicCounterIncrement(uCounter1);
  atomicCounterIncrement(uCounter1);
  
  // increment counter2 and counter3 in SSBO
  atomicAdd(uCounter2, 1);
  atomicAdd(uCounter3, 2);
  
  // use atomic values to update a texture buffer
  uint size = imageSize(uData).x;
  imageStore(uData, int(pos % size), uvec4(pos % 256, gl_GlobalInvocationID.x, 0, 0));
}
